#!/usr/bin/env python3
"""
Push converted Expo apps to GitHub repositories
"""
import os
import subprocess
import json
from datetime import datetime

def run_command(command, cwd=None):
    """Run a shell command and return the result"""
    try:
        result = subprocess.run(
            command, 
            shell=True, 
            cwd=cwd, 
            capture_output=True, 
            text=True, 
            check=True
        )
        return True, result.stdout
    except subprocess.CalledProcessError as e:
        return False, e.stderr

def check_git_installed():
    """Check if git is installed"""
    success, _ = run_command("git --version")
    return success

def check_github_cli_installed():
    """Check if GitHub CLI is installed"""
    success, _ = run_command("gh --version")
    return success

def is_git_repo(path):
    """Check if directory is a git repository"""
    return os.path.exists(os.path.join(path, '.git'))

def init_git_repo(project_path):
    """Initialize a git repository"""
    print("   📦 Initializing git repository...")
    success, output = run_command("git init", cwd=project_path)
    if not success:
        print(f"   ❌ Failed to initialize git: {output}")
        return False
    
    # Create .gitignore
    gitignore_content = """# Expo
.expo/
dist/
web-build/

# Node
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# OSX
.DS_Store

# IDEs
.vscode/
.idea/

# Temporary files
*.tmp
*.temp

# Logs
*.log
logs/

# Runtime data
pids/
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/

# Environment variables
.env
.env.local
.env.production

# Build outputs
build/
dist/
"""
    
    with open(os.path.join(project_path, '.gitignore'), 'w') as f:
        f.write(gitignore_content)
    
    print("   ✅ Git repository initialized")
    return True

def create_readme(project_path, app_name):
    """Create a README.md file for the project"""
    
    # Read app.json to get app details
    app_json_path = os.path.join(project_path, 'app.json')
    app_description = "A React Native mobile application"
    
    if os.path.exists(app_json_path):
        try:
            with open(app_json_path, 'r') as f:
                app_config = json.load(f)
            app_description = f"Mobile app: {app_config.get('expo', {}).get('name', app_name)}"
        except Exception:
            pass
    
    readme_content = f"""# {app_name}

{app_description}

Generated by React Native Builder Agent - an AI-powered tool that creates complete React Native applications from natural language descriptions.

## 📱 About This App

This is an Expo-compatible React Native application that can be run on iOS, Android, and Web platforms.

## 🚀 Quick Start

### Using Expo Go (Easiest)

1. Install Expo Go on your mobile device:
   - [iOS App Store](https://apps.apple.com/app/expo-go/id982107779)
   - [Google Play Store](https://play.google.com/store/apps/details?id=host.exp.exponent)

2. Start the development server:
   ```bash
   npm install
   npm start
   ```

3. Scan the QR code with Expo Go app

### Using Expo CLI

```bash
# Install Expo CLI globally
npm install -g @expo/cli

# Install dependencies
npm install

# Start development server
expo start

# Run on specific platforms
expo start --android
expo start --ios
expo start --web
```

## 🏗️ Building for Production

### Using EAS Build (Recommended)

```bash
# Install EAS CLI
npm install -g eas-cli

# Login to Expo account
eas login

# Configure build
eas build:configure

# Build for Android
eas build --platform android

# Build for iOS
eas build --platform ios

# Submit to app stores
eas submit --platform android
eas submit --platform ios
```

### Local Build

```bash
# For Android (requires Android Studio)
expo run:android

# For iOS (requires Xcode - macOS only)
expo run:ios
```

## 📁 Project Structure

```
{app_name}/
├── App.js                  # Main application component
├── app.json               # Expo configuration
├── package.json           # Dependencies and scripts
├── src/
│   ├── screens/          # Application screens
│   └── components/       # Reusable components
└── assets/               # Images, fonts, etc.
```

## 🧰 Tech Stack

- **React Native** - Mobile app framework
- **Expo** - Development platform and tools
- **React Navigation** - Screen navigation
- **JavaScript/ES6+** - Programming language

## 📝 Available Scripts

- `npm start` - Start Expo development server
- `npm run android` - Start on Android
- `npm run ios` - Start on iOS  
- `npm run web` - Start web version

## 🔧 Environment Setup

### Prerequisites

- Node.js (v16 or later)
- npm or yarn
- Expo CLI (`npm install -g @expo/cli`)

### For Native Development (Optional)

- **Android**: Android Studio with Android SDK
- **iOS**: Xcode (macOS only)

## 🌐 Testing Online

You can test this app online without any setup:

1. **Expo Snack**: Copy the code to https://snack.expo.dev/
2. **Appetize.io**: Upload built APK/IPA to https://appetize.io/

## 🚀 Deployment Options

- **Expo Application Services (EAS)** - Cloud builds and app store deployment
- **Self-hosted** - Build and deploy manually
- **OTA Updates** - Push updates without app store review

## 📚 Learn More

- [Expo Documentation](https://docs.expo.dev/)
- [React Native Documentation](https://reactnative.dev/)
- [React Navigation](https://reactnavigation.org/)

## 🤖 Generated by AI

This application was generated using the React Native Builder Agent, which uses:
- **LangGraph** for workflow management
- **Azure OpenAI** for intelligent code generation
- **FastAPI** for the backend service

## 📄 License

MIT License - feel free to use this code for your own projects.

## 🐛 Issues & Support

If you encounter any issues:
1. Check the [Expo documentation](https://docs.expo.dev/)
2. Search for solutions on [Stack Overflow](https://stackoverflow.com/questions/tagged/expo)
3. Open an issue in this repository

---

**Created on:** {datetime.now().strftime("%Y-%m-%d")}
**Generated by:** React Native Builder Agent
"""
    
    with open(os.path.join(project_path, 'README.md'), 'w') as f:
        f.write(readme_content)
    
    print("   📝 README.md created")

def add_and_commit_files(project_path, app_name):
    """Add and commit all files to git"""
    print("   📝 Adding files to git...")
    
    # Add all files
    success, output = run_command("git add .", cwd=project_path)
    if not success:
        print(f"   ❌ Failed to add files: {output}")
        return False
    
    # Configure git user if not set (for first time users)
    run_command('git config user.name "React Native Builder Agent"', cwd=project_path)
    run_command('git config user.email "builder@reactnative.ai"', cwd=project_path)
    
    # Commit files
    commit_message = f"Initial commit: {app_name} generated by React Native Builder Agent"
    success, output = run_command(f'git commit -m "{commit_message}"', cwd=project_path)
    if not success:
        print(f"   ❌ Failed to commit files: {output}")
        return False
    
    print("   ✅ Files committed to git")
    return True

def create_github_repo(app_name, project_path):
    """Create GitHub repository using GitHub CLI"""
    print("   🌐 Creating GitHub repository...")
    
    repo_name = app_name.lower().replace(' ', '-')
    description = f"React Native mobile app: {app_name} - Generated by AI Builder Agent"
    
    # Create public repository
    cmd = f'gh repo create {repo_name} --public --description "{description}" --source=. --push'
    success, output = run_command(cmd, cwd=project_path)
    
    if success:
        print(f"   ✅ GitHub repository created: https://github.com/{get_github_username()}/{repo_name}")
        return True, repo_name
    else:
        print(f"   ❌ Failed to create repository: {output}")
        return False, None

def get_github_username():
    """Get current GitHub username"""
    success, output = run_command("gh api user --jq .login")
    if success:
        return output.strip()
    return "your-username"

def push_to_existing_repo(project_path, repo_url):
    """Push to an existing GitHub repository"""
    print("   📤 Pushing to existing repository...")
    
    # Add remote origin
    success, output = run_command(f"git remote add origin {repo_url}", cwd=project_path)
    if not success and "already exists" not in output:
        print(f"   ❌ Failed to add remote: {output}")
        return False
    
    # Push to main branch
    success, output = run_command("git push -u origin main", cwd=project_path)
    if not success:
        # Try master branch if main doesn't exist
        success, output = run_command("git push -u origin master", cwd=project_path)
        if not success:
            print(f"   ❌ Failed to push: {output}")
            return False
    
    print("   ✅ Code pushed to GitHub")
    return True

def process_expo_app(app_name, expo_projects_path):
    """Process a single Expo app for GitHub upload"""
    print(f"\n🚀 Processing {app_name}...")
    project_path = os.path.join(expo_projects_path, app_name)
    
    if not os.path.exists(project_path):
        print(f"   ❌ Project not found: {project_path}")
        return False
    
    # Initialize git if needed
    if not is_git_repo(project_path):
        if not init_git_repo(project_path):
            return False
    
    # Create README
    create_readme(project_path, app_name)
    
    # Add and commit files
    if not add_and_commit_files(project_path, app_name):
        return False
    
    # Ask user for GitHub repo preference
    print(f"\n   📋 GitHub options for {app_name}:")
    print("   1. Create new GitHub repository (using GitHub CLI)")
    print("   2. Push to existing repository")
    print("   3. Skip GitHub upload")
    
    choice = input("   Choose option (1-3): ").strip()
    
    if choice == "1":
        if check_github_cli_installed():
            success, repo_name = create_github_repo(app_name, project_path)
            if success:
                print(f"   🎉 {app_name} successfully uploaded to GitHub!")
                return True
        else:
            print("   ❌ GitHub CLI not installed. Install with: brew install gh")
            print("   💡 Alternatively, choose option 2 to push to existing repo")
    
    elif choice == "2":
        repo_url = input("   Enter GitHub repository URL (https://github.com/user/repo.git): ").strip()
        if repo_url:
            if push_to_existing_repo(project_path, repo_url):
                print(f"   🎉 {app_name} successfully pushed to {repo_url}!")
                return True
    
    elif choice == "3":
        print(f"   ⏭️  Skipped GitHub upload for {app_name}")
        print(f"   📁 Local git repository ready at: {project_path}")
        return True
    
    else:
        print("   ❌ Invalid choice")
    
    return False

def main():
    """Main function to push Expo apps to GitHub"""
    print("🐙 Expo Apps to GitHub Uploader")
    print("=" * 40)
    
    # Check prerequisites
    if not check_git_installed():
        print("❌ Git is not installed. Please install Git first.")
        print("   Install: https://git-scm.com/downloads")
        return
    
    print("✅ Git is installed")
    
    if check_github_cli_installed():
        print("✅ GitHub CLI is installed")
    else:
        print("⚠️  GitHub CLI not found (optional)")
        print("   Install with: brew install gh")
        print("   Or create repositories manually on GitHub.com")
    
    # Check for Expo projects
    expo_projects_path = "/tmp/expo_projects"
    
    if not os.path.exists(expo_projects_path):
        print("❌ No Expo projects found in /tmp/expo_projects")
        print("💡 Run the conversion script first:")
        print("   python scripts/convert_to_expo.py")
        return
    
    # List available projects
    projects = [d for d in os.listdir(expo_projects_path) 
                if os.path.isdir(os.path.join(expo_projects_path, d))]
    
    if not projects:
        print("❌ No Expo projects found")
        return
    
    print(f"\n📱 Found {len(projects)} Expo projects:")
    for i, project in enumerate(projects, 1):
        print(f"{i}. {project}")
    
    # Ask user which projects to upload
    print("\n📤 Upload options:")
    print("1. Upload all projects")
    print("2. Select specific projects")
    print("3. Cancel")
    
    choice = input("Choose option (1-3): ").strip()
    
    if choice == "1":
        # Upload all projects
        success_count = 0
        for project in projects:
            if process_expo_app(project, expo_projects_path):
                success_count += 1
        
        print("\n🎉 Upload completed!")
        print(f"✅ {success_count}/{len(projects)} projects uploaded successfully")
    
    elif choice == "2":
        # Select specific projects
        print("\nEnter project numbers to upload (e.g., 1,3 or 1-3):")
        selection = input("Projects: ").strip()
        
        try:
            selected_indices = []
            for part in selection.split(','):
                if '-' in part:
                    start, end = map(int, part.split('-'))
                    selected_indices.extend(range(start-1, end))
                else:
                    selected_indices.append(int(part)-1)
            
            success_count = 0
            for i in selected_indices:
                if 0 <= i < len(projects):
                    if process_expo_app(projects[i], expo_projects_path):
                        success_count += 1
            
            print("\n🎉 Upload completed!")
            print(f"✅ {success_count}/{len(selected_indices)} selected projects uploaded")
            
        except ValueError:
            print("❌ Invalid selection format")
    
    elif choice == "3":
        print("👋 Upload cancelled")
    
    else:
        print("❌ Invalid choice")
    
    # Show manual instructions
    print("\n📚 Manual GitHub Upload Instructions:")
    print("=" * 40)
    print("If you prefer to upload manually:")
    print("1. Create a new repository on GitHub.com")
    print("2. Navigate to your project:")
    for project in projects:
        project_path = os.path.join(expo_projects_path, project)
        print(f"   cd {project_path}")
        print(f"   git remote add origin https://github.com/YOUR-USERNAME/{project.lower()}.git")
        print("   git push -u origin main")
        print()

if __name__ == "__main__":
    main()